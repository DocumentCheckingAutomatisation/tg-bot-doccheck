import os

from aiogram import Router, types, F
from aiogram.filters import Command

from logger import logger
from services.api import validate_docx_document, validate_latex_document

router = Router()

user_documents = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–≥—Ä—É–∂–∞—é—â–∏—Ö LaTeX-—Ñ–∞–π–ª—ã


@router.message(Command("check_docx"))
async def handle_docx_check(message: types.Message):
    user_id = message.from_user.id
    logger.debug(f"üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É .docx –¥–æ–∫—É–º–µ–Ω—Ç–∞")

    if not message.reply_to_message or not message.reply_to_message.document:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ .docx —Ñ–∞–π–ª –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_docx <—Ç–∏–ø_–¥–æ–∫—É–º–µ–Ω—Ç–∞> (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–∞–π–ª)")
        return

    doc_type = parts[1]
    file = message.reply_to_message.document

    doc_path = f"/tmp/{file.file_id}.docx"
    await file.download(destination=doc_path)
    logger.debug(f"üì• –§–∞–π–ª {file.file_name} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {doc_path}")

    result = validate_docx_document(doc_path, doc_type)
    os.remove(doc_path)

    if result:
        await message.answer(result.get("message", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."))
        if "errors" in result:
            await message.answer("–û—à–∏–±–∫–∏:\n" + "\n".join(result["errors"]))
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")


@router.message(Command("check_latex"))
async def handle_latex_check(message: types.Message):
    user_id = message.from_user.id
    logger.debug(f"üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É LaTeX –¥–æ–∫—É–º–µ–Ω—Ç–∞")

    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_latex <—Ç–∏–ø_–¥–æ–∫—É–º–µ–Ω—Ç–∞>")
        return

    doc_type = parts[1]
    user_documents[user_id] = {"doc_type": doc_type}
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ .tex —Ñ–∞–π–ª.")


@router.message(F.document)
async def handle_latex_files(message: types.Message):
    user_id = message.from_user.id

    if user_id not in user_documents:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª /check_latex

    file = message.document
    filename = file.file_name

    if filename.endswith(".tex"):
        path = f"/tmp/{file.file_id}.tex"
        await file.download(destination=path)
        user_documents[user_id]["tex"] = path
        logger.debug(f"üì• –ü–æ–ª—É—á–µ–Ω .tex —Ñ–∞–π–ª –æ—Ç {user_id}")
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .sty —Ñ–∞–π–ª.")
    elif filename.endswith(".sty"):
        path = f"/tmp/{file.file_id}.sty"
        await file.download(destination=path)
        user_documents[user_id]["sty"] = path
        logger.debug(f"üì• –ü–æ–ª—É—á–µ–Ω .sty —Ñ–∞–π–ª –æ—Ç {user_id}")

        doc_type = user_documents[user_id].get("doc_type")
        tex_path = user_documents[user_id].get("tex")
        sty_path = user_documents[user_id].get("sty")

        if not tex_path or not sty_path or not doc_type:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–æ–≤.")
            return

        result = validate_latex_document(tex_path, sty_path, doc_type)

        os.remove(tex_path)
        os.remove(sty_path)
        user_documents.pop(user_id, None)

        if result:
            await message.answer(result.get("message", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."))
            if "errors" in result:
                await message.answer("–û—à–∏–±–∫–∏:\n" + "\n".join(result["errors"]))
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")


def register(dp):
    dp.include_router(router)
