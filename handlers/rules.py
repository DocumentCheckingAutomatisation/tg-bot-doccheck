import json
from datetime import datetime

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from db import get_user_role, REVIEWER_ROLE
from logger import logger
from services.api import get_doc_options, get_rules, change_rule, change_rule_for_all

router = Router()

MAX_STATE_LIFETIME = 300


class RuleStates(StatesGroup):
    waiting_for_doc_type = State()


def get_valid_doc_types():
    options = get_doc_options()
    return [opt["name"].lower() for opt in options] if options else []


async def is_state_expired(state: FSMContext) -> bool:
    data = await state.get_data()
    start_time = data.get("start_time")
    if not start_time:
        return False
    now = datetime.now().timestamp()
    return (now - start_time) > MAX_STATE_LIFETIME


@router.message(Command("types"))
async def available_types(message: types.Message):
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    options = get_doc_options()
    if options:
        text = "\n".join(opt["name"].lower().replace("_", "\\_") for opt in options)
        await message.answer(f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:*\n{text}", parse_mode="Markdown")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")


@router.message(Command("rules"))
async def show_rules(message: types.Message, state: FSMContext):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await state.update_data(start_time=datetime.now().timestamp())
        await message.answer("‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: diploma, course_work, practice_report).")
        await state.set_state(RuleStates.waiting_for_doc_type)
        return

    doc_type = parts[1].strip().lower().replace(" ", "_")
    await process_doc_type_internal(message, doc_type, state)


@router.message(RuleStates.waiting_for_doc_type)
async def process_doc_type(message: types.Message, state: FSMContext):
    if await is_state_expired(state):
        await message.answer("‚åõ –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –Ω–µ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /rules.")
        await state.clear()
        return

    doc_type = message.text.strip().lower().replace(" ", "_")
    await process_doc_type_internal(message, doc_type, state)


async def process_doc_type_internal(message: types.Message, doc_type: str, state: FSMContext):
    valid_types = get_valid_doc_types()

    if doc_type not in valid_types:
        ds = '\\'
        text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n\n*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:*\n" + "\n".join(
            f"- {t.replace('_', f'{ds}_')}" for t in valid_types)
        await state.update_data(start_time=datetime.now().timestamp())
        await message.answer(text, parse_mode="Markdown")
        await state.set_state(RuleStates.waiting_for_doc_type)
        return

    await send_rules(message, doc_type)
    await state.clear()


async def send_rules(message: types.Message, doc_type: str):
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è {doc_type}")
    rules = get_rules(doc_type)

    if not rules:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª.")
        return

    user_id = message.from_user.id
    role = get_user_role(user_id)

    if role == REVIEWER_ROLE:
        pretty_rules = json.dumps(rules, indent=2, ensure_ascii=False)
    else:
        pretty_rules = format_rules_for_students(rules)

    max_length = 4000

    if len(pretty_rules) > max_length:
        chunks = [pretty_rules[i:i + max_length] for i in range(0, len(pretty_rules), max_length)]
        await message.answer(f"*–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–∏–ø–∞:* `{doc_type}`", parse_mode="Markdown")
        for chunk in chunks:
            await message.answer(f"```\n{chunk}\n```", parse_mode="Markdown")
    else:
        await message.answer(
            f"*–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–∏–ø–∞:* `{doc_type}`\n```\n{pretty_rules}\n```",
            parse_mode="Markdown"
        )


def format_rules_for_students(rules: dict) -> str:
    parts = []
    common = rules.get("common_rules", {})
    if common:
        parts.append("\nüìÑ *–û–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é:*")
        parts.append(f"‚Ä¢ –®—Ä–∏—Ñ—Ç: {common.get('font', '?')}, {common.get('font_size', '?')} –ø—Ç")
        parts.append(f"‚Ä¢ –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {common.get('line_spacing', '?')}")
        parts.append(f"‚Ä¢ –ê–±–∑–∞—Ü–Ω—ã–π –æ—Ç—Å—Ç—É–ø: {common.get('paragraph_indent', '?')} —Å–º")
        margins = common.get("margins", {})
        parts.append(f"‚Ä¢ –ü–æ–ª—è: –≤–µ—Ä—Ö–Ω–µ–µ ‚Äî {margins.get('top', '?')} –º–º, –Ω–∏–∂–Ω–µ–µ ‚Äî {margins.get('bottom', '?')} –º–º, "
                     f"–ª–µ–≤–æ–µ ‚Äî {margins.get('left', '?')} –º–º, –ø—Ä–∞–≤–æ–µ ‚Äî {margins.get('right', '?')} –º–º")
        align = common.get("alignment", {})
        parts.append(
            f"‚Ä¢ –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: {align.get('text', '?')}, –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü ‚Äî {align.get('page_numbers', '?')}")

    structure = rules.get("structure_rules", {})
    if structure:
        parts.append("\nüìö *–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:*")
        chapters = structure.get("required_chapters", [])
        if chapters:
            parts.append("‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≥–ª–∞–≤—ã:")
            for ch in chapters:
                parts.append(f"  ‚Äî {ch}")
        sections = structure.get("required_sections", {})
        if sections:
            parts.append("‚Ä¢ –¢—Ä–µ–±—É–µ–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø–æ –≥–ª–∞–≤–∞–º:")
            for ch, secs in sections.items():
                parts.append(f"  –ì–ª–∞–≤–∞ {ch}:")
                for s in secs:
                    parts.append(f"    ‚Äî {s}")
        intro = structure.get("introduction_keywords", [])
        if intro:
            parts.append("‚Ä¢ –í–æ –≤–≤–µ–¥–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏ –≤—ã–¥–µ–ª–µ–Ω—ã –∂–∏—Ä–Ω—ã–º:")
            for i in intro:
                parts.append(f"  ‚Äî {i}")

    design = rules.get("design_rules", {})
    if design:
        parts.append("\nüé® *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:*")
        if "chapter" in design:
            parts.append("‚Ä¢ –ì–ª–∞–≤—ã: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É, –ø–æ–ª—É–∂–∏—Ä–Ω—ã–µ, 14 –ø—Ç, –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã")
        if "section" in design:
            parts.append("‚Ä¢ –†–∞–∑–¥–µ–ª—ã: –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–ª–µ–≤–∞, –ø–æ–ª—É–∂–∏—Ä–Ω—ã–µ, 14 –ø—Ç")
        if "subsection" in design:
            parts.append("‚Ä¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã: –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–ª–µ–≤–∞, –æ–±—ã—á–Ω—ã–µ, 14 –ø—Ç")
        if "list" in design:
            parts.append("‚Ä¢ –°–ø–∏—Å–∫–∏: –º–æ–≥—É—Ç –±—ã—Ç—å –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–æ–π (1) –∏–ª–∏ –±—É–∫–≤–æ–π (–∞) –∏–ª–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ (-)")
        if "table" in design:
            parts.append("‚Ä¢ –¢–∞–±–ª–∏—Ü—ã: –ø–æ–¥–ø–∏—Å–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É, —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ '(—Ç–∞–±–ª. 1.1)'")
        if "picture" in design:
            parts.append("‚Ä¢ –†–∏—Å—É–Ω–∫–∏: –ø–æ–¥–ø–∏—Å–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É, —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ '(—Ä–∏—Å. 1.1)'")

    return "\n".join(parts)


@router.message(Command("change_rule"))
async def update_rule(message: types.Message):
    user_id = message.from_user.id
    role = get_user_role(user_id)
    if role != REVIEWER_ROLE:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –±–µ–∑ –ø—Ä–∞–≤.")
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.")
        return

    parts = message.text.split()
    if len(parts) < 4:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /change_rule <—Ç–∏–ø_–¥–æ–∫—É–º–µ–Ω—Ç–∞> <–∫–ª—é—á> <–Ω–æ–≤–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ>")
        return

    # doc_type = parts[1].strip().lower().replace(" ", "_")
    # rule_key = parts[2]
    # new_value = parts[3]
    doc_type, rule_key, new_value = parts[1], parts[2], " ".join(parts[3:])

    logger.debug(f"–ù–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä {user_id} –º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ {rule_key} –¥–ª—è {doc_type} –Ω–∞ {new_value}")
    result = change_rule(doc_type, rule_key, new_value)
    if result:
        await message.answer(result.get("message", "‚úÖ –ü—Ä–∞–≤–∏–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ."))
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª–∞.")


@router.message(Command("change_rule_for_all"))
async def handle_change_rule_for_all(message: types.Message):
    user_id = message.from_user.id
    role = get_user_role(user_id)
    if role != REVIEWER_ROLE:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –±–µ–∑ –ø—Ä–∞–≤.")
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.")
        return

    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /change_rule_for_all <–∫–ª—é—á> <–Ω–æ–≤–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ>")
        return

    rule_key = parts[1]
    new_value = " ".join(parts[2:])

    # rule_key = parts[1]
    # new_value = parts[2]

    result = change_rule_for_all(rule_key, new_value)
    if result:
        text = result.get("message", "‚úÖ –ü—Ä–∞–≤–∏–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
        if "errors" in result:
            text += "\n\n‚ö†Ô∏è –û—à–∏–±–∫–∏:\n" + "\n".join(result["errors"])
        await message.answer(text)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª–∞.")


def register(dp):
    dp.include_router(router)
