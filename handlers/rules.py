import json

from aiogram import Router, types
from aiogram.filters import Command

from db import get_user_role, REVIEWER_ROLE
from logger import logger
from services.api import get_doc_options, get_rules, change_rule, change_rule_for_all

router = Router()


@router.message(Command("types"))
async def available_types(message: types.Message):
    logger.debug(f"üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    options = get_doc_options()
    if options:
        text = "\n".join(opt["name"] for opt in options)
        await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n{text}")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")


@router.message(Command("rules"))
async def show_rules(message: types.Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rules <—Ç–∏–ø_–¥–æ–∫—É–º–µ–Ω—Ç–∞>")
        return
    doc_type = parts[1]
    logger.debug(f"üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è {doc_type}")

    rules = get_rules(doc_type)

    if not rules:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª.")
        return

    pretty_rules = json.dumps(rules, indent=2, ensure_ascii=False)
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram: 4096 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    max_length = 4000

    if len(pretty_rules) > max_length:
        chunks = [pretty_rules[i:i + max_length] for i in range(0, len(pretty_rules), max_length)]
        await message.answer(f"*–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–∏–ø–∞:* `{doc_type}`", parse_mode="Markdown")
        for chunk in chunks:
            await message.answer(f"```json\n{chunk}\n```", parse_mode="Markdown")
    else:
        await message.answer(
            f"*–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–∏–ø–∞:* `{doc_type}`\n```json\n{pretty_rules}\n```",
            parse_mode="Markdown"
        )


@router.message(Command("change_rule"))
async def update_rule(message: types.Message):
    user_id = message.from_user.id
    role = get_user_role(user_id)
    if role != REVIEWER_ROLE:
        logger.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –±–µ–∑ –ø—Ä–∞–≤.")
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.")
        return

    parts = message.text.split()
    if len(parts) < 4:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /change_rule <—Ç–∏–ø_–¥–æ–∫—É–º–µ–Ω—Ç–∞> <–∫–ª—é—á> <–Ω–æ–≤–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ>")
        return

    doc_type, rule_key, new_value = parts[1], parts[2], " ".join(parts[3:])
    logger.debug(f"üìù –ù–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä {user_id} –º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ {rule_key} –¥–ª—è {doc_type} –Ω–∞ {new_value}")
    result = change_rule(doc_type, rule_key, new_value)
    if result:
        await message.answer(result.get("message", "–ü—Ä–∞–≤–∏–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ."))
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª–∞.")


@router.message(Command("change_rule_for_all"))
async def handle_change_rule_for_all(message: types.Message):
    user_id = message.from_user.id
    role = get_user_role(user_id)
    if role != REVIEWER_ROLE:
        logger.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –±–µ–∑ –ø—Ä–∞–≤.")
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.")
        return

    parts = message.text.split()
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /change_rule_for_all <–∫–ª—é—á> <–Ω–æ–≤–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ>")
        return

    rule_key = parts[1]
    new_value = " ".join(parts[2:])

    result = change_rule_for_all(rule_key, new_value)
    if result:
        text = result.get("message", "–ü—Ä–∞–≤–∏–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
        if "errors" in result:
            text += "\n\n–û—à–∏–±–∫–∏:\n" + "\n".join(result["errors"])
        await message.answer(text)
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª–∞.")


def register(dp):
    dp.include_router(router)
