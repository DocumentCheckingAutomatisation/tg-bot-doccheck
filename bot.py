# üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:
# telegram_bot/
# ‚îú‚îÄ‚îÄ bot.py               # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# ‚îú‚îÄ‚îÄ config.py            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ‚îú‚îÄ‚îÄ logger.py            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ‚îú‚îÄ‚îÄ db.py                # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
# ‚îú‚îÄ‚îÄ services/api.py      # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å FastAPI-—Å–µ—Ä–≤–∏—Å–æ–º
# ‚îî‚îÄ‚îÄ handlers/
#     ‚îú‚îÄ‚îÄ start.py         # –ö–æ–º–∞–Ω–¥—ã start –∏ set_reviewer
#     ‚îú‚îÄ‚îÄ documents.py     # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
#     ‚îî‚îÄ‚îÄ rules.py         # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª

from aiogram import Bot, Dispatcher
from config import BOT_TOKEN
from logger import logger
from db import init_db
from handlers import start, documents, rules

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

init_db()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
start.register(dp)
documents.register(dp)
rules.register(dp)

if __name__ == "__main__":
    logger.info("üîÅ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    try:
        dp.run_polling(bot)
    except Exception as e:
        logger.critical(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")



# import logging
# import os
# from dotenv import load_dotenv
# from aiogram import Bot, Dispatcher, types
# from aiogram.types import Message
# from aiogram.filters import Command
# from db import get_user_role, set_user_role
#
# # === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
# log_format = "%(asctime)s [%(levelname)s] %(message)s"
#
# file_handler = logging.FileHandler("bot.log", encoding="utf-8")
# file_handler.setLevel(logging.DEBUG)
# file_handler.setFormatter(logging.Formatter(log_format))
#
# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
# logger = logging.getLogger(__name__)
# logger.setLevel(logging.DEBUG)
# logger.addHandler(file_handler)
#
# # === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
# load_dotenv()
# BOT_TOKEN = os.getenv("BOT_TOKEN")
# SECRET_CODE = os.getenv("SECRET_CODE")
#
# bot = Bot(token=BOT_TOKEN)
# dp = Dispatcher()
#
# # === –ö–æ–º–∞–Ω–¥—ã ===
#
# @dp.message(Command("start"))
# async def cmd_start(message: Message):
#     user_id = message.from_user.id
#     set_user_role(user_id, "student")
#     logger.info(f"[START] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É.")
#     await message.answer("–ü—Ä–∏–≤–µ—Ç! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç.\n–ï—Å–ª–∏ —Ç—ã –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä ‚Äî –≤–≤–µ–¥–∏ /set_reviewer")
#
# @dp.message(Command("set_reviewer"))
# async def cmd_set_reviewer(message: Message):
#     user_id = message.from_user.id
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥:")
#
#     @dp.message()
#     async def handle_code(msg: Message):
#         if msg.from_user.id != user_id:
#             return
#         if msg.text.strip() == SECRET_CODE:
#             set_user_role(msg.from_user.id, "reviewer")
#             logger.info(f"[ROLE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} —Å—Ç–∞–ª –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–º.")
#             await msg.answer("‚úÖ –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞: —Ç–µ–ø–µ—Ä—å –≤—ã –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä.")
#         else:
#             logger.warning(f"[AUTH_FAIL] –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}.")
#             await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –í—ã –æ—Å—Ç–∞–ª–∏—Å—å —Å—Ç—É–¥–µ–Ω—Ç–æ–º.")
#         dp.message.unregister(handle_code)
#
# @dp.message(Command("change_rules"))
# async def cmd_change_rules(message: Message):
#     user_id = message.from_user.id
#     role = get_user_role(user_id)
#     logger.debug(f"[ACCESS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –≤ /change_rules. –†–æ–ª—å: {role}")
#     if role != "reviewer":
#         logger.warning(f"[DENIED] –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
#         await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –Ω–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–≤.")
#         return
#     await message.answer("üõ† –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
#     logger.info(f"[ACCESS_GRANTED] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ /change_rules")
#
# @dp.message(Command("check_document"))
# async def cmd_check_document(message: Message):
#     user_id = message.from_user.id
#     logger.info(f"[DOC] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
#
#     try:
#         await message.answer("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
#         logger.debug(f"[DOC] –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏–Ω—è—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
#
#         # –ó–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
#         await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
#         logger.info(f"[DOC_SUCCESS] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
#
#     except Exception as e:
#         logger.error(f"[DOC_ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
#         await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
#
# # === –ó–∞–ø—É—Å–∫ ===
# if __name__ == "__main__":
#     logger.info("üîÅ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
#     try:
#         dp.run_polling(bot)
#     except Exception as e:
#         logger.critical(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
