from aiogram.types import Message


async def send_long_message(message: Message, text: str):
    max_length = 4096
    for i in range(0, len(text), max_length):
        await message.answer(text[i:i + max_length], parse_mode="HTML")


def format_latex_validation_result(result: dict) -> str:
    def yesno(errors: list, key: str) -> str:
        patterns = {
            "structure.chapters": ["–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –≥–ª–∞–≤–∞", "–û—à–∏–±–∫–∞: –ø–æ—Å–ª–µ \\\\chapter",
                                   "–û—à–∏–±–∫–∞: —Ç–∏—Ç—É–ª—å–Ω—ã–π –ª–∏—Å—Ç", "–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç \\tableofcontents"],
            "structure.sections": ["–í –≥–ª–∞–≤–µ"],
            "bold.relevance": ["–∞–∫—Ç—É–∞–ª—å–Ω"],
            "bold.goal": ["—Ü–µ–ª—å"],
            "bold.tasks": ["–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω–∏—è", "–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.*–∑–∞–¥–∞—á–∏"],
            "bold.object": ["–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω–∏—è", "–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.*–ø—Ä–µ–¥–º–µ—Ç"],
            "bold.subject": ["–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω–∏—è", "–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.*–æ–±—ä–µ–∫—Ç"],
            "bold.novelty": ["–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω–∏—è", "–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.*–Ω–æ–≤–∏–∑–Ω"],
            "bold.significance": ["–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω–∏—è", "–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.*–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å"],
            "bold.excess": ["–∂–∏—Ä–Ω—ã–π"],
            "italic": ["–∫—É—Ä—Å–∏–≤"],
            "underline": ["–ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ"],
            "lists": ["–ü—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞", "–í–≤–æ–¥–Ω–∞—è —á–∞—Å—Ç—å –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∫–æ–º", "–≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ", "–≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"],
            "pictures.links": ["–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∏—Å—É–Ω–æ–∫", "–ù–µ—Ç —Ä–∏—Å—É–Ω–∫–∞"],
            "tables.links": ["–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ table", "–ù–µ—Ç table", "–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ longtable", "–ù–µ—Ç longtable"],
            "appendices.links": ["–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"],
            "bibliography.links": ["–±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏–∏"],
            "order.references_before_objects": ["–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ"],
            "order.same_page": ["–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", "–Ω–∞ —Ç–æ–π –∂–µ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"],
            "sty": ["–§–∞–π–ª settings.sty", "–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ settings.sty"],
        }

        import re
        key_patterns = patterns.get(key, [])
        for err in errors:
            for p in key_patterns:
                if re.search(p, err, re.IGNORECASE):
                    return "–ù–µ—Ç ‚ùå"
        return "–î–∞ ‚úÖ"

    def get_list_summary(found: dict) -> str:
        lists = found.get("lists", {})
        return (
            f"<blockquote>–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏:\n"
            f"- –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ (–±—É–∫–≤—ã): {len(lists.get('enumasbuk', []))}\n"
            f"- –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ (—Ü–∏—Ñ—Ä—ã): {len(lists.get('enumarabic', []))}\n"
            f"- –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–¥–µ—Ñ–∏—Å): {len(lists.get('enummarker', []))}</blockquote>"
        )

    def get_pic_summary(found: dict) -> str:
        pics = found.get("pictures", {})
        labels = ", ".join(p.get("label") for p in pics.get("labels", [])) or "–Ω–µ—Ç"
        refs = ", ".join(p.get("label") for p in pics.get("refs", [])) or "–Ω–µ—Ç"
        return f"<blockquote>–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∏—Å—É–Ω–∫–∏:\n- –ú–µ—Ç–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤: {labels}\n- –°—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ: {refs}</blockquote>"

    def get_table_summary(found: dict) -> str:
        tables = found.get("tables", {}).get("tables", {})
        labels = ", ".join(t.get("label") for t in tables.get("labels", [])) or "–Ω–µ—Ç"
        refs = ", ".join(t.get("label") for t in tables.get("refs", [])) or "–Ω–µ—Ç"
        return f"<blockquote>–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:\n- –ú–µ—Ç–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤: {labels}\n- –°—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ: {refs}</blockquote>"

    def get_chapters(found: dict) -> str:
        structure = found.get("structure", {})
        unnum = ", ".join(structure.get("unnumbered_chapters", [])) or "–Ω–µ—Ç"
        num = ", ".join(structure.get("numbered_chapters", [])) or "–Ω–µ—Ç"
        return f"<blockquote> –ì–ª–∞–≤—ã:\n- –ù–µ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ: {unnum}\n- –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ: {num} </blockquote>"

    def get_sections(found: dict) -> str:
        structure = found.get("structure", {})
        sec = structure.get("numbered_sections", {})
        unsec = structure.get("unnumbered_sections", {})

        def format_sec(sec_dict, title):
            entries = sec_dict.get(title, [])
            return ", ".join(entries) if entries else "–Ω–µ—Ç"

        return (
            f"<blockquote>–†–∞–∑–¥–µ–ª—ã:\n"
            f"- 1 –≥–ª–∞–≤–∞: –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ: {format_sec(sec, '1 –≥–ª–∞–≤–∞')}, –Ω–µ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ: {format_sec(unsec, '1 –≥–ª–∞–≤–∞')}\n"
            f"- 2 –≥–ª–∞–≤–∞: –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ: {format_sec(sec, '2 –≥–ª–∞–≤–∞')}, –Ω–µ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ: {format_sec(unsec, '2 –≥–ª–∞–≤–∞')}</blockquote>"
        )

    def format_readable() -> str:
        errors = result.get("errors", [])
        found = result.get("found", {})

        aspects = [
            ("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≥–ª–∞–≤—ã", yesno(errors, "structure.chapters"), get_chapters(found)),
            ("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã", yesno(errors, "structure.sections"), get_sections(found)),
            ("–¶–µ–ª—å –≤—ã–¥–µ–ª–µ–Ω–∞ –∂–∏—Ä–Ω—ã–º", yesno(errors, "bold.goal")),
            ("–ó–∞–¥–∞—á–∏ –≤—ã–¥–µ–ª–µ–Ω—ã –∂–∏—Ä–Ω—ã–º", yesno(errors, "bold.tasks")),
            ("–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∂–∏—Ä–Ω—ã–º", yesno(errors, "bold.relevance")),
            ("–û–±—ä–µ–∫—Ç –≤—ã–¥–µ–ª–µ–Ω –∂–∏—Ä–Ω—ã–º", yesno(errors, "bold.subject")),
            ("–ü—Ä–µ–¥–º–µ—Ç –≤—ã–¥–µ–ª–µ–Ω –∂–∏—Ä–Ω—ã–º", yesno(errors, "bold.object")),
            ("–ù–æ–≤–∏–∑–Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–∞ –∂–∏—Ä–Ω—ã–º", yesno(errors, "bold.novelty")),
            ("–ü—Ä–∞–∫—Ç–∏—á. –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –∂–∏—Ä–Ω—ã–º", yesno(errors, "bold.significance")),
            ("–ù–µ—Ç –ª–∏—à–Ω–µ–≥–æ –∂–∏—Ä–Ω–æ–≥–æ", yesno(errors, "bold.excess")),
            ("–ù–µ—Ç –∫—É—Ä—Å–∏–≤–∞", yesno(errors, "italic")),
            ("–ù–µ—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π", yesno(errors, "underline")),
            ("–°–ø–∏—Å–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", yesno(errors, "lists"), get_list_summary(found)),
            ("–†–∏—Å—É–Ω–∫–∏ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö", yesno(errors, "pictures.links"), get_pic_summary(found)),
            ("–¢–∞–±–ª–∏—Ü—ã –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö", yesno(errors, "tables.links"), get_table_summary(found)),
            ("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö", yesno(errors, "appendices.links")),
            ("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö", yesno(errors, "bibliography.links")),
            ("–°—Å—ã–ª–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –¥–æ —Ä–∏—Å—É–Ω–∫–∞/—Ç–∞–±–ª–∏—Ü—ã", yesno(errors, "order.references_before_objects")),
            ("–°—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–π –∂–µ/—Å–æ—Å–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç —Ä–∏—Å./—Ç–∞–±–ª.", yesno(errors, "order.same_page")),
            ("–§–∞–π–ª settings.sty —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º", yesno(errors, "sty")),
        ]

        lines = []
        for aspect in aspects:
            if len(aspect) == 2:
                name, validity = aspect
                lines.append(f"üîπ{name}: {validity}\n")
            else:
                name, validity, detail = aspect
                lines.append(f"üîπ{name} ‚Äî {validity} {detail}\n")

        return "\n".join(lines)

    def format_errors(errors: list) -> str:
        return "\n".join(f"üìå {e}\n" for e in errors) if errors else "–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æüòä"

    valid = "–î–∞ ‚úÖ" if result.get("valid", True) else "–ù–µ—Ç ‚ùå"
    check_results = format_readable()
    errors_text = format_errors(result.get("errors", []))

    return (
        f"üìã <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ LaTeX-–¥–æ–∫—É–º–µ–Ω—Ç–∞</b>\n\n"
        f"üí¨ <u><b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:</b></u> {valid}\n\n"
        f"üîé <u><b>–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b></u>\n{check_results}\n"
        f"‚ö†Ô∏è <u><b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:</b></u>\n\n{errors_text}"
    )


def format_docx_validation_result(result: dict) -> str:
    valid = "‚úÖ –î–∞" if result.get("valid", True) else "‚ùå –ù–µ—Ç"

    found = result.get("found")
    if found:
        found_list = "\n".join(f"- {item}" for item in found)
    else:
        found_list = "_–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.(–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)_"

    errors = result.get("errors")
    if errors:
        errors_list = "\n".join(f"- {error}" for error in errors)
    else:
        errors_list = "_–û—à–∏–±–æ–∫ –Ω–µ—Ç._"

    formatted_text = (
        f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n\n"
        f"üí¨ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:* {valid}\n\n"
        f"üîé *–ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:*\n{found_list}\n\n"
        f"‚ö†Ô∏è *–û—à–∏–±–∫–∏:*\n{errors_list}"
    )
    return formatted_text
